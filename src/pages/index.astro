---
import Layout from "../layouts/Layout.astro"
import { PrismaClient } from "@prisma/client"
import { getNextIdForModel, GOOD_LCG_VALUES } from "../server/utils"
import { findValuesForNearM } from "../server/LCG_math"

const prisma = new PrismaClient()

const errors = {
	message: "",
	replyToId: "",
	lcg_generic: "",
}
let lcg_values: ({
	a: number,
	c: number,
	m: number,
}|{
	error: string,
})[] | undefined

async function handleFormMessage(formData: FormData) {
	const message = formData.get("message")
	const replyToId = formData.get("replyToId")
	
	const repliedMessage = await prisma.frontPageMessage.findUnique({
		where: {
			id: replyToId as string
		}
	})

	if (!message) {
		errors.message = "Enter a message"
	}
	
	if (replyToId && (repliedMessage == null)) {
		// Show error on the field
		errors.replyToId = "Invalid ID"
	}
	
	const hasErrors = Object.values(errors).some(e => e != "")
	if (!hasErrors) {
		await prisma.frontPageMessage.create({
			data: {
				id: await getNextIdForModel("Message"),
				message: message as string,
				replyToId: (replyToId||undefined) as string|undefined,
			}
		})
		return Astro.redirect("/")
	}
}

async function handleFormLCG(formData: FormData) {
	const targetM = Number(formData.get("targetM"))
	const lcgCount = Number(formData.get("lcgCount"))


	if (!targetM) {
		errors.lcg_generic = "Enter a target M size"
		return
	}

	if (![1,3,10,25].includes(lcgCount)) {
		errors.lcg_generic = "Invalid count"
		return
	}

	const MAXIMUM_ALLOWED_NUMBER_SOLO = 3521614606199 * 10000
	const MAXIMUM_ALLOWED_NUMBER = 3521614606199 * 110 / (lcgCount * lcgCount)
	if (lcgCount == 1) {
		if (targetM > MAXIMUM_ALLOWED_NUMBER_SOLO) {
			errors.lcg_generic = "Target M is too large. Lower Target or Count"
			return
		}
	} else if (targetM > MAXIMUM_ALLOWED_NUMBER) {
		errors.lcg_generic = "Target M is too large. Lower Target or Count"
		return
	}

	if (targetM < 1000) {
		errors.lcg_generic = "Target M is too small"
		return
	}

	lcg_values = []
	for (let i = 0; i < lcgCount; i++) {
		const result = await findValuesForNearM(targetM)
		if (result.success) {
			lcg_values.push(result.value)
		} else {
			lcg_values.push({error: result.error})
		}
	}
}

if (Astro.request.method == "POST") {
	const formData = await Astro.request.formData()
	const formType = formData.get("formType")

	if (formType == "message") {
		return await handleFormMessage(formData)
	} else if (formType == "lcg") {
		await handleFormLCG(formData)
	}
}

const messages = await prisma.frontPageMessage.findMany({
	orderBy: {
		createdAt: "desc",
	},
	take: 20,
	include: {
		replyTo: {
			select: {
				id: true,
			}
		}
	}
})
messages.reverse()

console.log("Fetching /")
---

<Layout>
	<h1 class="title">The Content Driven Website</h1>
	<p>Demo and a proof of consept for self-hosted site using fs-db and Astro. Not a dating site despite the name.</p>
	<br>
	<h3>Messages</h3>
	<div class="messages">
		{messages.map(m => <div class="message" id={`message-${m.id}`}>
			{m.replyToId && <div class="replyTo">
					<span>Reply to
					<a href={`#message-${m.replyToId}`}>{m.replyToId}</a>
					</span>
				</div>}
			<span>
				<a href=`message/${m.id}` class="mono" style="color: #a57549">{m.id}</a>: {m.message}
				<button 
					class="reply-button" 
					onclick={`document.querySelector('input[name="replyToId"]').value = '${m.id}'; document.querySelector('#message-text-input').focus();`}
				>
					<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><path fill="currentColor" d="M185.2 128.6V19.7L0 204.9l185.2 185.2v-109c152.5 0 250.5 0 326.8 217.9c0-108.9 10.9-370.4-326.8-370.4"/></svg>
					Reply
				</button>
			</span>
		</div>)}
	</div>
	<form method="POST" style="display: flex; flex-direction: row; gap: 0.25rem; width: 100%; padding-top: 0.5rem;">
		<input type="hidden" name="formType" value="message" />
		<span>Add Message</span>
		<div class="inputArea" style="flex-grow: 15;">
			<input id="message-text-input" type="text" name="message" minlength="5" maxlength="200" placeholder="Add Message" />
			{errors.message && <span style="color: red;">{errors.message}</span>}
		</div>
		<div class="inputArea">
			<input type="text" name="replyToId" value="" placeholder="Reply to ID" />
			{errors.replyToId && <span style="color: red;">{errors.replyToId}</span>}
		</div>
		<button type="submit" style="flex-grow: 2;">Add</button>
	</form>
	<div style="min-height: 30px;"></div>
	<br>
	<h2 id="lcg-title">Good LCG Values</h2>
	<p>All values produce 100% coverage of the possible values</p>
	<div class="tableWrapper">
		<table class="lcg-table mono">
			<tr>
				<th>Name</th>
				<th>M</th>
				<th>A</th>
				<th>C</th>
			</tr>
			{GOOD_LCG_VALUES.map(v => <tr>
				<td>{v.name || 'Unnamed'}</td>
				<td>{v.m}</td>
				<td>{v.a}</td>
				<td>{v.c}</td>
			</tr>)}
		</table>
	</div>
	<div>
		<h2 id="lcg-title-generate">Can't find your base? Generate your own!</h2>
		<p>All of the generated values have full period</p>
		<form method="POST">
			<input type="hidden" name="formType" value="lcg" />
			<input type="number" name="targetM" placeholder="Target M Size" />
			<select name="lcgCount">
				<option value="1">Count 1</option>
				<option value="3" selected>Count 3</option>
				<option value="10">Count 10</option>
				<option value="25">Count 25</option>
			</select>
			<button type="submit">Generate</button>
			<div>
				{errors.lcg_generic && <span style="color: red;">{errors.lcg_generic}</span>}
			</div>
			{lcg_values && lcg_values.length > 0 && <div class="tableWrapper">
				<table class="lcg-table mono">
					<tr>
						<td>M</td>
						<td>A</td>
						<td>C</td>
					</tr>
					{lcg_values.map(v => {
						if ('error' in v) {
							return (
								<tr style="color: red;">
									<td colspan={3}>Error: {v.error}</td>
								</tr>
							);
						} else {
						return (<tr>
							<td>{v.m}</td>
							<td>{v.a}</td>
							<td>{v.c}</td>
						</tr>)}}
					)}
				</table>
			</div>}
		</form>
	</div>
	<div style="min-height: 30px;"></div>
</Layout>

<style>
	.title {
		font-size: clamp(1rem, 7vw, 2.25rem);
	}
	.messages {
		border: 1px dashed red;
		padding: 1rem 0;
		display: flex;
		flex-direction: column;
		gap: 0.25rem;
	}
	.inputArea {
		display: flex;
		flex-direction: column;
		gap: 0.25rem;
		overflow: hidden;
	}
	.inputArea input {
		flex-grow: 1;
	}
	form {
		overflow: hidden;
	}
	
	#message-text-input::placeholder {
			opacity: 0;
		}
	@media screen and (max-width: 568px) {
		form > span {
			display: none;
		}
		#message-text-input::placeholder {
			opacity: 1;
		}
	}
	.replyTo {
		--reply-to-color: #fff6;
		font-size: 0.66rem;
		border-top: 1px solid var(--reply-to-color);
		border-left: 1px solid var(--reply-to-color);
		color: var(--reply-to-color);
		width: fit-content;
		padding-left: 0.5rem;
		border-radius: 0.6rem 0 0 0;
	}
	.replyTo a {
		color: inherit;
	}
	.replyTo:has(a:hover) {
		--reply-to-color: #fff;
	}
	.message {
		padding: 0 1rem;
		position: relative;
	}
	.message:target {
		background-color: #f0f0f015;
	}
	.reply-button {
		position: absolute;
		right: 1rem;
		opacity: 0;
		transition: opacity 0.2s ease;
		background-color: #333;
		color: white;
		border: 1px solid #555;
		border-radius: 4px;
		padding: 2px 8px;
		font-size: 0.8rem;
		cursor: pointer;
	}
	.message:hover .reply-button {
		opacity: 1;
	}
	.reply-button:hover {
		background-color: #444;
	}
	.reply-button svg {
		width: 1rem;
		height: 1rem;
		position: absolute;
		right: 110%;
		pointer-events: none;
	}
	#lcg-title {
		font-size: clamp(0.9rem, 8.5vw, 2rem);
	}
	.lcg-table {
		border: 1px dashed red;
		text-align: left;
		border-collapse: collapse;
		width: clamp(250px, 100%, 500px);
		white-space: nowrap;
	}
	.lcg-table td {
		padding-right: 1.25ch;
	}
	.lcg-table tr:nth-child(odd) {
		background-color: #f0f0f015;
	}
	.tableWrapper {
		overflow-x: auto;
		width: 100%;
	}
	#lcg-title-generate {
		font-size: clamp(1rem, 5vw, 2rem);
	}
</style>
